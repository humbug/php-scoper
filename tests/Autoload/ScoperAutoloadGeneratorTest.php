<?php

declare(strict_types=1);

/*
 * This file is part of the humbug/php-scoper package.
 *
 * Copyright (c) 2017 Théo FIDRY <theo.fidry@gmail.com>,
 *                    Pádraic Brady <padraic.brady@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Humbug\PhpScoper\Autoload;

use Humbug\PhpScoper\Whitelist;
use PhpParser\Node\Name\FullyQualified;
use PHPUnit\Framework\TestCase;

class ScoperAutoloadGeneratorTest extends TestCase
{
    /**
     * @dataProvider provideWhitelists
     */
    public function test_generate_the_autoload(Whitelist $whitelist, string $expected)
    {
        $prefix = 'Humbug';

        $generator = new ScoperAutoloadGenerator($whitelist);

        $actual = $generator->dump($prefix);

        $this->assertSame($expected, $actual);
    }

    public function provideWhitelists()
    {
        yield 'empty whitelist' => [
            Whitelist::create(true, true, true),
            <<<'PHP'
<?php

// scoper-autoload.php @generated by PhpScoper

$loader = require_once __DIR__.'/autoload.php';

return $loader;

PHP
        ];

        yield 'whitelist with whitelisted global functions recorded' => [
            (function () {
                $whitelist = Whitelist::create(true, true, true);

                $whitelist->recordWhitelistedFunction(
                    new FullyQualified('foo'),
                    new FullyQualified('Humbug\foo')
                );

                $whitelist->recordWhitelistedFunction(
                    new FullyQualified('bar'),
                    new FullyQualified('Humbug\bar')
                );

                return $whitelist;
            })(),
            <<<'PHP'
<?php

// scoper-autoload.php @generated by PhpScoper

$loader = require_once __DIR__.'/autoload.php';

// Functions whitelisting. For more information see:
// https://github.com/humbug/php-scoper/blob/master/README.md#functions-whitelisting
if (!function_exists('foo')) {
    function foo() {
        return \Humbug\foo(...func_get_args());
    }
}
if (!function_exists('bar')) {
    function bar() {
        return \Humbug\bar(...func_get_args());
    }
}

return $loader;

PHP
        ];

        yield 'whitelist with whitelisted namespaced functions recorded' => [
            (function () {
                $whitelist = Whitelist::create(true, true, true);

                $whitelist->recordWhitelistedFunction(
                    new FullyQualified('Acme\foo'),
                    new FullyQualified('Humbug\Acme\foo')
                );

                $whitelist->recordWhitelistedFunction(
                    new FullyQualified('Acme\bar'),
                    new FullyQualified('Humbug\Acme\bar')
                );

                $whitelist->recordWhitelistedFunction(
                    new FullyQualified('Emca\baz'),
                    new FullyQualified('Humbug\Emca\baz')
                );

                return $whitelist;
            })(),
            <<<'PHP'
<?php

// scoper-autoload.php @generated by PhpScoper

namespace {
    $loader = require_once __DIR__.'/autoload.php';
}

// Functions whitelisting. For more information see:
// https://github.com/humbug/php-scoper/blob/master/README.md#functions-whitelisting
namespace Acme {
    if (!function_exists('Acme\foo')) {
        function foo() {
            return \Humbug\Acme\foo(...func_get_args());
        }
    }
}
namespace Acme {
    if (!function_exists('Acme\bar')) {
        function bar() {
            return \Humbug\Acme\bar(...func_get_args());
        }
    }
}
namespace Emca {
    if (!function_exists('Emca\baz')) {
        function baz() {
            return \Humbug\Emca\baz(...func_get_args());
        }
    }
}

namespace {
    return $loader;
}

PHP
        ];

        yield 'whitelist with whitelisted classes but none recorded' => [
            Whitelist::create(true, true, true, 'A\Foo', 'B\Bar'),
            <<<'PHP'
<?php

// scoper-autoload.php @generated by PhpScoper

$loader = require_once __DIR__.'/autoload.php';

return $loader;

PHP
        ];

        yield 'whitelist with whitelisted classes recorded' => [
            (function () {
                $whitelist = Whitelist::create(true, true, true, 'A\Foo', 'B\Bar');

                $whitelist->recordWhitelistedClass(
                    new FullyQualified('A\Foo'),
                    new FullyQualified('Humbug\A\Foo')
                );

                return $whitelist;
            })(),
            <<<'PHP'
<?php

// scoper-autoload.php @generated by PhpScoper

$loader = require_once __DIR__.'/autoload.php';

// Aliases for the whitelisted classes. For more information see:
// https://github.com/humbug/php-scoper/blob/master/README.md#class-whitelisting
class_exists('Humbug\A\Foo');

return $loader;

PHP
        ];

        yield 'whitelist with whitelisted global classes recorded' => [
            (function () {
                $whitelist = Whitelist::create(true, true, true);

                $whitelist->recordWhitelistedClass(
                    new FullyQualified('Foo'),
                    new FullyQualified('Humbug\Foo')
                );

                $whitelist->recordWhitelistedClass(
                    new FullyQualified('Bar'),
                    new FullyQualified('Humbug\Bar')
                );

                return $whitelist;
            })(),
            <<<'PHP'
<?php

// scoper-autoload.php @generated by PhpScoper

$loader = require_once __DIR__.'/autoload.php';

// Aliases for the whitelisted classes. For more information see:
// https://github.com/humbug/php-scoper/blob/master/README.md#class-whitelisting
class_exists('Humbug\Foo');
class_exists('Humbug\Bar');

return $loader;

PHP
        ];

        yield 'complete whitelist' => [
            (function () {
                $whitelist = Whitelist::create(true, true, true, 'A\Foo', 'B\Bar');

                $whitelist->recordWhitelistedClass(
                    new FullyQualified('A\Foo'),
                    new FullyQualified('Humbug\A\Foo')
                );

                $whitelist->recordWhitelistedFunction(
                    new FullyQualified('foo'),
                    new FullyQualified('Humbug\foo')
                );

                $whitelist->recordWhitelistedFunction(
                    new FullyQualified('bar'),
                    new FullyQualified('Humbug\bar')
                );

                $whitelist->recordWhitelistedFunction(
                    new FullyQualified('Acme\foo'),
                    new FullyQualified('Humbug\Acme\foo')
                );

                $whitelist->recordWhitelistedFunction(
                    new FullyQualified('Acme\bar'),
                    new FullyQualified('Humbug\Acme\bar')
                );

                $whitelist->recordWhitelistedFunction(
                    new FullyQualified('Emca\baz'),
                    new FullyQualified('Humbug\Emca\baz')
                );

                return $whitelist;
            })(),
            <<<'PHP'
<?php

// scoper-autoload.php @generated by PhpScoper

namespace {
    $loader = require_once __DIR__.'/autoload.php';
}

// Aliases for the whitelisted classes. For more information see:
// https://github.com/humbug/php-scoper/blob/master/README.md#class-whitelisting
namespace {
    class_exists('Humbug\A\Foo');
}

// Functions whitelisting. For more information see:
// https://github.com/humbug/php-scoper/blob/master/README.md#functions-whitelisting
namespace {
    if (!function_exists('foo')) {
        function foo() {
            return \Humbug\foo(...func_get_args());
        }
    }
}
namespace {
    if (!function_exists('bar')) {
        function bar() {
            return \Humbug\bar(...func_get_args());
        }
    }
}
namespace Acme {
    if (!function_exists('Acme\foo')) {
        function foo() {
            return \Humbug\Acme\foo(...func_get_args());
        }
    }
}
namespace Acme {
    if (!function_exists('Acme\bar')) {
        function bar() {
            return \Humbug\Acme\bar(...func_get_args());
        }
    }
}
namespace Emca {
    if (!function_exists('Emca\baz')) {
        function baz() {
            return \Humbug\Emca\baz(...func_get_args());
        }
    }
}

namespace {
    return $loader;
}

PHP
        ];
    }
}
