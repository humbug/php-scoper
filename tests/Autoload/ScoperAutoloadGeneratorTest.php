<?php

declare(strict_types=1);

/*
 * This file is part of the humbug/php-scoper package.
 *
 * Copyright (c) 2017 Théo FIDRY <theo.fidry@gmail.com>,
 *                    Pádraic Brady <padraic.brady@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Humbug\PhpScoper\Autoload;

use Humbug\PhpScoper\Symbol\SymbolsRegistry;
use PhpParser\Node\Name\FullyQualified;
use PHPUnit\Framework\TestCase;

/**
 * @internal
 */
class ScoperAutoloadGeneratorTest extends TestCase
{
    /**
     * @dataProvider provideRegistry
     */
    public function test_generate_the_autoload(SymbolsRegistry $registry, string $expected): void
    {
        $generator = new ScoperAutoloadGenerator($registry);

        $actual = $generator->dump();

        self::assertSame($expected, $actual);
    }

    public static function provideRegistry(): iterable
    {
        yield 'empty registry' => [
            new SymbolsRegistry(),
            <<<'PHP'
                <?php

                // scoper-autoload.php @generated by PhpScoper

                $loader = require_once __DIR__.'/autoload.php';
                require_once __DIR__.'/composer/InstalledVersions.php';

                return $loader;

                PHP,
        ];

        yield 'global functions recorded' => [
            self::createRegistry(
                [
                    'bar' => 'Humbug\bar',
                    'foo' => 'Humbug\foo',
                ],
                [],
            ),
            <<<'PHP'
                <?php

                // scoper-autoload.php @generated by PhpScoper

                $loader = require_once __DIR__.'/autoload.php';
                require_once __DIR__.'/composer/InstalledVersions.php';

                // Function aliases. For more information see:
                // https://github.com/humbug/php-scoper/blob/master/docs/further-reading.md#function-aliases
                if (!function_exists('bar')) { function bar() { return \Humbug\bar(...func_get_args()); } }
                if (!function_exists('foo')) { function foo() { return \Humbug\foo(...func_get_args()); } }

                return $loader;

                PHP,
        ];

        yield 'global functions recorded unordered' => [
            self::createRegistry(
                [
                    'foo' => 'Humbug\foo',
                    'bar' => 'Humbug\bar',
                ],
                [],
            ),
            <<<'PHP'
                <?php

                // scoper-autoload.php @generated by PhpScoper

                $loader = require_once __DIR__.'/autoload.php';
                require_once __DIR__.'/composer/InstalledVersions.php';

                // Function aliases. For more information see:
                // https://github.com/humbug/php-scoper/blob/master/docs/further-reading.md#function-aliases
                if (!function_exists('bar')) { function bar() { return \Humbug\bar(...func_get_args()); } }
                if (!function_exists('foo')) { function foo() { return \Humbug\foo(...func_get_args()); } }

                return $loader;

                PHP,
        ];

        yield 'namespaced functions recorded' => [
            self::createRegistry(
                [
                    'Acme\bar' => 'Humbug\Acme\bar',
                    'Acme\foo' => 'Humbug\Acme\foo',
                    'Emca\baz' => 'Humbug\Emca\baz',
                ],
                [],
            ),
            <<<'PHP'
                <?php

                // scoper-autoload.php @generated by PhpScoper

                namespace {
                    $loader = require_once __DIR__.'/autoload.php';
                    require_once __DIR__.'/composer/InstalledVersions.php';
                }

                // Function aliases. For more information see:
                // https://github.com/humbug/php-scoper/blob/master/docs/further-reading.md#function-aliases
                namespace Acme {
                    if (!function_exists('Acme\bar')) { function bar() { return \Humbug\Acme\bar(...func_get_args()); } }
                }

                namespace Acme {
                    if (!function_exists('Acme\foo')) { function foo() { return \Humbug\Acme\foo(...func_get_args()); } }
                }

                namespace Emca {
                    if (!function_exists('Emca\baz')) { function baz() { return \Humbug\Emca\baz(...func_get_args()); } }
                }

                namespace {
                    return $loader;
                }

                PHP,
        ];

        yield 'namespaced functions recorded unordered' => [
            self::createRegistry(
                [
                    'Acme\foo' => 'Humbug\Acme\foo',
                    'Emca\baz' => 'Humbug\Emca\baz',
                    'Acme\bar' => 'Humbug\Acme\bar',
                ],
                [],
            ),
            <<<'PHP'
                <?php

                // scoper-autoload.php @generated by PhpScoper

                namespace {
                    $loader = require_once __DIR__.'/autoload.php';
                    require_once __DIR__.'/composer/InstalledVersions.php';
                }

                // Function aliases. For more information see:
                // https://github.com/humbug/php-scoper/blob/master/docs/further-reading.md#function-aliases
                namespace Acme {
                    if (!function_exists('Acme\bar')) { function bar() { return \Humbug\Acme\bar(...func_get_args()); } }
                }

                namespace Acme {
                    if (!function_exists('Acme\foo')) { function foo() { return \Humbug\Acme\foo(...func_get_args()); } }
                }

                namespace Emca {
                    if (!function_exists('Emca\baz')) { function baz() { return \Humbug\Emca\baz(...func_get_args()); } }
                }

                namespace {
                    return $loader;
                }

                PHP,
        ];

        yield 'classes recorded' => [
            self::createRegistry(
                [],
                [
                    'A\Foo' => 'Humbug\A\Foo',
                ],
            ),
            <<<'PHP'
                <?php

                // scoper-autoload.php @generated by PhpScoper

                $loader = require_once __DIR__.'/autoload.php';
                require_once __DIR__.'/composer/InstalledVersions.php';

                // Class aliases. For more information see:
                // https://github.com/humbug/php-scoper/blob/master/docs/further-reading.md#class-aliases
                function humbug_phpscoper_expose_class(string $exposed, string $prefixed): void {
                    if (!class_exists($exposed, false) && !interface_exists($exposed, false) && !trait_exists($exposed, false)) {
                        spl_autoload_call($prefixed);
                    }
                }
                humbug_phpscoper_expose_class('A\Foo', 'Humbug\A\Foo');

                return $loader;

                PHP,
        ];

        yield 'global classes recorded' => [
            self::createRegistry(
                [],
                [
                    'Foo' => 'Humbug\Foo',
                    'Bar' => 'Humbug\Bar',
                ],
            ),
            <<<'PHP'
                <?php

                // scoper-autoload.php @generated by PhpScoper

                $loader = require_once __DIR__.'/autoload.php';
                require_once __DIR__.'/composer/InstalledVersions.php';

                // Class aliases. For more information see:
                // https://github.com/humbug/php-scoper/blob/master/docs/further-reading.md#class-aliases
                function humbug_phpscoper_expose_class(string $exposed, string $prefixed): void {
                    if (!class_exists($exposed, false) && !interface_exists($exposed, false) && !trait_exists($exposed, false)) {
                        spl_autoload_call($prefixed);
                    }
                }
                humbug_phpscoper_expose_class('Foo', 'Humbug\Foo');
                humbug_phpscoper_expose_class('Bar', 'Humbug\Bar');

                return $loader;

                PHP,
        ];

        yield 'nominal' => [
            self::createRegistry(
                [
                    'bar' => 'Humbug\bar',
                    'foo' => 'Humbug\foo',
                    'Acme\foo' => 'Humbug\Acme\foo',
                    'Acme\bar' => 'Humbug\Acme\bar',
                    'Emca\baz' => 'Humbug\Emca\baz',
                ],
                [
                    'A\Foo' => 'Humbug\A\Foo',
                ],
            ),
            <<<'PHP'
                <?php

                // scoper-autoload.php @generated by PhpScoper

                namespace {
                    $loader = require_once __DIR__.'/autoload.php';
                    require_once __DIR__.'/composer/InstalledVersions.php';
                }

                // Class aliases. For more information see:
                // https://github.com/humbug/php-scoper/blob/master/docs/further-reading.md#class-aliases
                namespace {
                    function humbug_phpscoper_expose_class(string $exposed, string $prefixed): void {
                        if (!class_exists($exposed, false) && !interface_exists($exposed, false) && !trait_exists($exposed, false)) {
                            spl_autoload_call($prefixed);
                        }
                    }
                    humbug_phpscoper_expose_class('A\Foo', 'Humbug\A\Foo');
                }

                // Function aliases. For more information see:
                // https://github.com/humbug/php-scoper/blob/master/docs/further-reading.md#function-aliases
                namespace Acme {
                    if (!function_exists('Acme\bar')) { function bar() { return \Humbug\Acme\bar(...func_get_args()); } }
                }

                namespace Acme {
                    if (!function_exists('Acme\foo')) { function foo() { return \Humbug\Acme\foo(...func_get_args()); } }
                }

                namespace Emca {
                    if (!function_exists('Emca\baz')) { function baz() { return \Humbug\Emca\baz(...func_get_args()); } }
                }

                namespace {
                    if (!function_exists('bar')) { function bar() { return \Humbug\bar(...func_get_args()); } }
                }

                namespace {
                    if (!function_exists('foo')) { function foo() { return \Humbug\foo(...func_get_args()); } }
                }

                namespace {
                    return $loader;
                }

                PHP,
        ];

        // https://github.com/humbug/php-scoper/issues/267
        yield '__autoload global function with no namespaced functions' => [
            self::createRegistry(
                [
                    '__autoload' => 'Humbug\__autoload',
                ],
                [],
            ),
            <<<'PHP'
                <?php

                // scoper-autoload.php @generated by PhpScoper

                $loader = require_once __DIR__.'/autoload.php';
                require_once __DIR__.'/composer/InstalledVersions.php';

                // Function aliases. For more information see:
                // https://github.com/humbug/php-scoper/blob/master/docs/further-reading.md#function-aliases
                if (!function_exists('__autoload')) { function __autoload($className) { return \Humbug\__autoload(...func_get_args()); } }

                return $loader;

                PHP,
        ];

        // https://github.com/humbug/php-scoper/issues/267
        yield '__autoload global function with namespaced functions' => [
            self::createRegistry(
                [
                    '__autoload' => 'Humbug\__autoload',
                    'Acme\foo' => 'Humbug\Acme\foo',
                ],
                [],
            ),
            <<<'PHP'
                <?php

                // scoper-autoload.php @generated by PhpScoper

                namespace {
                    $loader = require_once __DIR__.'/autoload.php';
                    require_once __DIR__.'/composer/InstalledVersions.php';
                }

                // Function aliases. For more information see:
                // https://github.com/humbug/php-scoper/blob/master/docs/further-reading.md#function-aliases
                namespace Acme {
                    if (!function_exists('Acme\foo')) { function foo() { return \Humbug\Acme\foo(...func_get_args()); } }
                }

                namespace {
                    if (!function_exists('__autoload')) { function __autoload($className) { return \Humbug\__autoload(...func_get_args()); } }
                }

                namespace {
                    return $loader;
                }

                PHP,
        ];
    }

    /**
     * @param array<string, string> $functions
     * @param array<string, string> $classes
     */
    private static function createRegistry(
        array $functions,
        array $classes
    ): SymbolsRegistry {
        $registry = new SymbolsRegistry();

        foreach ($functions as $original => $alias) {
            $registry->recordFunction(
                new FullyQualified($original),
                new FullyQualified($alias),
            );
        }

        foreach ($classes as $original => $alias) {
            $registry->recordClass(
                new FullyQualified($original),
                new FullyQualified($alias),
            );
        }

        return $registry;
    }
}
