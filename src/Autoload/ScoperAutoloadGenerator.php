<?php

declare(strict_types=1);

/*
 * This file is part of the humbug/php-scoper package.
 *
 * Copyright (c) 2017 Théo FIDRY <theo.fidry@gmail.com>,
 *                    Pádraic Brady <padraic.brady@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Humbug\PhpScoper\Autoload;

use Humbug\PhpScoper\PhpParser\NodeVisitor\Collection\UserGlobalFunctionCollection;
use Humbug\PhpScoper\Whitelist;
use PhpParser\Node\Name\FullyQualified;
use const PHP_EOL;
use function array_map;
use function array_unshift;
use function iterator_to_array;
use function sprintf;
use function str_replace;

final class ScoperAutoloadGenerator
{
    private $whitelist;

    public function __construct(Whitelist $whitelist)
    {
        $this->whitelist = $whitelist;
    }

    public function dump(string $prefix): string
    {
        $classAliasStatements = $this->createClassAliasStatements($prefix);

        $statements = implode(PHP_EOL, $classAliasStatements).PHP_EOL.PHP_EOL;
        $statements .= implode(PHP_EOL, $this->createFunctionAliasStatements($this->whitelist->getUserGlobalFunctions()));

        $dump = <<<PHP
<?php

// scoper-autoload.php @generated by PhpScoper

\$loader = require_once __DIR__.'/autoload.php';

$statements

return \$loader;

PHP;
        $cleanedDump = $dump;

        do {
            $dump = $cleanedDump;
            $cleanedDump = str_replace("\n\n\n", "\n\n", $dump);
        } while ($cleanedDump !== $dump);

        return $dump;
    }

    /**
     * @return string[]
     */
    public function createClassAliasStatements(string $prefix): array
    {
        $statements = array_map(
            function (string $whitelistedElement) use ($prefix): string {
                return sprintf(
                    'class_exists(\'%s\%s\');',
                    $prefix,
                    $whitelistedElement
                );
            },
            $this->whitelist->getClassWhitelistArray()
        );

        if ([] === $statements) {
            return $statements;
        }

        array_unshift(
            $statements,
            <<<'EOF'
// Aliases for the whitelisted classes. For more information see:
// https://github.com/humbug/php-scoper/blob/master/README.md#classes--constants-whitelisting
EOF
        );

        return $statements;
    }

    /**
     * @return string[]
     */
    public function createFunctionAliasStatements(UserGlobalFunctionCollection $userGlobalFunctions): array
    {
        $statements = array_map(
            function (array $node): string {
                /**
                 * @var FullyQualified
                 * @var FullyQualified $alias
                 */
                [$original, $alias] = $node;

                return sprintf(
                    <<<'PHP'
if (!function_exists('%1$s')) {
    function %1$s() {
        return \%2$s(...func_get_args());
    }
}
PHP
                    ,
                    $original->toString(),
                    $alias->toString()
                );
            },
            iterator_to_array($userGlobalFunctions)
        );

        if ([] === $statements) {
            return $statements;
        }

        array_unshift(
            $statements,
            <<<'EOF'
// Functions whitelisting. For more information see:
// https://github.com/humbug/php-scoper/blob/master/README.md#global-user-functions
EOF
        );

        return $statements;
    }
}
