<?php

declare(strict_types=1);

/*
 * This file is part of the humbug/php-scoper package.
 *
 * Copyright (c) 2017 Théo FIDRY <theo.fidry@gmail.com>,
 *                    Pádraic Brady <padraic.brady@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Humbug\PhpScoper\Autoload;

use Humbug\PhpScoper\PhpParser\NodeVisitor\Collection\UserGlobalFunctionCollection;
use Humbug\PhpScoper\Whitelist;
use function array_map;
use function iterator_to_array;
use const PHP_EOL;
use PhpParser\Node\Name\FullyQualified;
use function sprintf;

final class ScoperAutoloadGenerator
{
    private $whitelist;

    public function __construct(Whitelist $whitelist)
    {
        $this->whitelist = $whitelist;
    }

    public function dump(string $prefix): string
    {
        $statements = implode(PHP_EOL, $this->createClassAliasStatements($prefix)).PHP_EOL;
        $statements .= implode(PHP_EOL, $this->createFunctionAliasStatements($this->whitelist->getUserGlobalFunctions()));

        return <<<PHP
<?php

// scoper-autoload.php @generated by PhpScoper

\$loader = require_once __DIR__.'/autoload.php'; 

$statements

return \$loader;

PHP;
    }

    /**
     * @return string[]
     */
    public function createClassAliasStatements(string $prefix): array
    {
        return array_map(
            function (string $whitelistedElement) use ($prefix): string {
                return sprintf(
                    'class_exists(\'%s\%s\');',
                    $prefix,
                    $whitelistedElement
                );
            },
            $this->whitelist->getClassWhitelistArray()
        );
    }

    /**
     * @return string[]
     */
    public function createFunctionAliasStatements(UserGlobalFunctionCollection $userGlobalFunctions): array
    {
        return array_map(
            function (array $node): string {
                /**
                 * @var FullyQualified $original
                 * @var FullyQualified $alias
                 */
                [$original, $alias] = $node;

                return sprintf(
                    <<<'PHP'
if (!function_exists('%1$s')) {
    function %1$s() {
        return \%2$s(func_get_args());
    }
}
PHP
                    ,
                    $original->toString(),
                    $alias->toString()
                );
            },
            iterator_to_array($userGlobalFunctions)
        );
    }
}
